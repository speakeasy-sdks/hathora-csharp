
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace hathora.Apps
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Text;
    using System.Threading.Tasks;
    using Newtonsoft.Json;
    using hathora.Models.Shared;
    using hathora.Models.Apps;
    using hathora.Utils;

    public interface IAppsSDK
    {
        Task<CreateAppResponse> CreateAsync(AppConfig request);
        Task<DeleteAppResponse> DeleteAsync(DeleteAppRequest request);
        Task<GetAppInfoResponse> GetAppInfoAsync(GetAppInfoRequest request);
        Task<GetAppsResponse> GetAppsAsync();
        Task<GetBuildInfoResponse> GetBuildInfoAsync(GetBuildInfoRequest request);
        Task<GetBuildsResponse> GetBuildsAsync(GetBuildsRequest request);
        Task<UpdateAppResponse> UpdateAsync(UpdateAppRequest request);
    }

    public class AppsSDK: IAppsSDK
    {

        private const string language = "csharp";
        private const string sdkVersion = "0.0.1";
        private const string sdkGenVersion = "internal";
        public Uri ServerUrl { get { return _defaultClient.BaseAddress; } }
        private HttpClient _defaultClient;
        private HttpClient _securityClient;

        public AppsSDK(HttpClient defaultClient, HttpClient securityClient)
        {
            _defaultClient = defaultClient;
            _securityClient = securityClient;
        }

        
    public async Task<CreateAppResponse> CreateAsync(AppConfig request)
    {
        string baseUrl = "";
        var message = AppConfig.BuildHttpRequestMessage("CreateApp", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new CreateAppResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 201))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Application = JsonConvert.DeserializeObject<Application>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 422))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 500))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

        
    public async Task<DeleteAppResponse> DeleteAsync(DeleteAppRequest request)
    {
        string baseUrl = "";
        var message = DeleteAppRequest.BuildHttpRequestMessage("DeleteApp", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new DeleteAppResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 204))
        {
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 500))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

        
    public async Task<GetAppInfoResponse> GetAppInfoAsync(GetAppInfoRequest request)
    {
        string baseUrl = "";
        var message = GetAppInfoRequest.BuildHttpRequestMessage("GetAppInfo", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetAppInfoResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Application = JsonConvert.DeserializeObject<Application>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

        
    public async Task<GetAppsResponse> GetAppsAsync()
    {
        string baseUrl = "";
        var message = new HttpRequestMessage(HttpMethod.Get, baseUrl + "/apps/v1/list");
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetAppsResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.ApplicationWithDeployments = JsonConvert.DeserializeObject<IEnumerable<ApplicationWithDeployment>>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

        
    public async Task<GetBuildInfoResponse> GetBuildInfoAsync(GetBuildInfoRequest request)
    {
        string baseUrl = "";
        var message = GetBuildInfoRequest.BuildHttpRequestMessage("GetBuildInfo", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetBuildInfoResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Build = JsonConvert.DeserializeObject<Build>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

        
    public async Task<GetBuildsResponse> GetBuildsAsync(GetBuildsRequest request)
    {
        string baseUrl = "";
        var message = GetBuildsRequest.BuildHttpRequestMessage("GetBuilds", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetBuildsResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Builds = JsonConvert.DeserializeObject<IEnumerable<Build>>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

        
    public async Task<UpdateAppResponse> UpdateAsync(UpdateAppRequest request)
    {
        string baseUrl = "";
        var message = UpdateAppRequest.BuildHttpRequestMessage("UpdateApp", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new UpdateAppResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Application = JsonConvert.DeserializeObject<Application>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 500))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

        
    }
}