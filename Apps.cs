///
 /// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 ///

namespace SDK.Apps;
using System.Net.Http;
using System.Text;
using Newtonsoft.Json;
using SDK.Models.Shared;
using SDK.Models.Apps;
using SDK.Utils;

public interface IAppsSDK
{
    Task<CreateAppResponse> CreateAsync(CreateAppRequestBody request);
    Task<DeleteAppResponse> DeleteAsync(DeleteAppRequest request);
    Task<GetAppsResponse> GetAppsAsync();
    Task<GetInfoAppResponse> GetInfoAsync(GetInfoAppRequest request);
    Task<UpdateAppResponse> UpdateAsync(UpdateAppRequest request);
}

public class AppsSDK: IAppsSDK
{

    private const string language = "csharp";
    private const string sdkVersion = "0.0.1";
    private const string sdkGenVersion = "internal";
    public Uri ServerUrl { get { return _defaultClient.BaseAddress; } }
    private HttpClient _defaultClient;
    private HttpClient _securityClient;

    public AppsSDK(HttpClient defaultClient, HttpClient securityClient)
    {
        _defaultClient = defaultClient;
        _securityClient = securityClient;
    }

    
    public async Task<CreateAppResponse> CreateAsync(CreateAppRequestBody request)
    {
        string baseUrl = "";
        var message = CreateAppRequestBody.BuildHttpRequestMessage("CreateApp", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new CreateAppResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 201))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Application = JsonConvert.DeserializeObject<Application>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 422))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 500))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

    
    public async Task<DeleteAppResponse> DeleteAsync(DeleteAppRequest request)
    {
        string baseUrl = "";
        var message = DeleteAppRequest.BuildHttpRequestMessage("DeleteApp", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new DeleteAppResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 204))
        {
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 500))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

    
    public async Task<GetAppsResponse> GetAppsAsync()
    {
        string baseUrl = "";
        var message = new HttpRequestMessage(HttpMethod.Get, "/apps/v1/list");
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetAppsResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.ApplicationWithDeployments = JsonConvert.DeserializeObject<IEnumerable<ApplicationWithDeployment>>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

    
    public async Task<GetInfoAppResponse> GetInfoAsync(GetInfoAppRequest request)
    {
        string baseUrl = "";
        var message = GetInfoAppRequest.BuildHttpRequestMessage("GetInfoApp", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetInfoAppResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Application = JsonConvert.DeserializeObject<Application>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

    
    public async Task<UpdateAppResponse> UpdateAsync(UpdateAppRequest request)
    {
        string baseUrl = "";
        var message = UpdateAppRequest.BuildHttpRequestMessage("UpdateApp", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new UpdateAppResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Application = JsonConvert.DeserializeObject<Application>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 422))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 500))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

    
}