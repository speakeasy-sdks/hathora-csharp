
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Hathora.Lobby
{
    using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Hathora.Models.Lobby;
using Hathora.Models.Shared;
using Hathora.Utils;

    public interface ILobbySDK
    {
        Task<CreateLobbyResponse> CreateAsync(CreateLobbyRequest? request = null);
        Task<DeprecatedCreateLocalLobbyResponse> DeprecatedCreateLocalLobbyAsync(DeprecatedCreateLocalLobbyRequest? request = null);
        Task<DeprecatedCreatePrivateLobbyResponse> DeprecatedCreatePrivateLobbyAsync(DeprecatedCreatePrivateLobbyRequest? request = null);
        Task<DeprecatedCreatePublicLobbyResponse> DeprecatedCreatePublicLobbyAsync(DeprecatedCreatePublicLobbyRequest? request = null);
        Task<DeprecatedV1CreatePrivateLobbyResponse> DeprecatedV1CreatePrivateLobbyAsync(DeprecatedV1CreatePrivateLobbyRequest request);
        Task<DeprecatedV1CreatePublicLobbyResponse> DeprecatedV1CreatePublicLobbyAsync(DeprecatedV1CreatePublicLobbyRequest request);
        Task<DeprecatedV1ListActivePublicLobbiesResponse> DeprecatedV1ListActivePublicLobbiesAsync(DeprecatedV1ListActivePublicLobbiesRequest request);
        Task<GetLobbyInfoResponse> GetLobbyInfoAsync(GetLobbyInfoRequest request);
        Task<ListActivePublicLobbiesResponse> ListActiveAsync(ListActivePublicLobbiesRequest request);
        Task<SetLobbyStateResponse> SetLobbyStateAsync(SetLobbyStateSecurity security, SetLobbyStateRequest? request = null);
    }

    public class LobbySDK: ILobbySDK
    {

        public SDKConfig Config { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.0.1";
        private const string _sdkGenVersion = "internal";
        private const string _openapiDocVersion = "0.0.1";
        public Uri ServerUrl { get { return _defaultClient.Client.BaseAddress; } }
        private SpeakeasyHttpClient _defaultClient;
        private SpeakeasyHttpClient _securityClient;

        public LobbySDK(SpeakeasyHttpClient defaultClient, SpeakeasyHttpClient securityClient, SDKConfig config)
        {
            _defaultClient = defaultClient;
            _securityClient = securityClient;
            Config = config;
        }

        
    public async Task<CreateLobbyResponse> CreateAsync(CreateLobbyRequest? request = null)
    {
        string baseUrl = "";
        var message = CreateLobbyRequest.BuildHttpRequestMessage("CreateLobby", request, baseUrl);
        var client = _defaultClient;

        message.Headers.Add("user-agent", $"speakeasy-sdk/{_language} {_sdkVersion} {_sdkGenVersion} {_openapiDocVersion}");
        var httpResponseMessage = await client.SendAsync(message);
        var response = new CreateLobbyResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 201))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Lobby = JsonConvert.DeserializeObject<Lobby>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 400))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.CreateLobby400ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        if((response.StatusCode == 401))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.CreateLobby401ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.CreateLobby404ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        if((response.StatusCode == 422))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.CreateLobby422ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        if((response.StatusCode == 429))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.CreateLobby429ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        if((response.StatusCode == 500))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.CreateLobby500ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        return response;
    }

        
    [Obsolete("This method will be removed in a future release, please migrate away from it as soon as possible")]
    public async Task<DeprecatedCreateLocalLobbyResponse> DeprecatedCreateLocalLobbyAsync(DeprecatedCreateLocalLobbyRequest? request = null)
    {
        string baseUrl = "";
        var message = DeprecatedCreateLocalLobbyRequest.BuildHttpRequestMessage("DeprecatedCreateLocalLobby", request, baseUrl);
        var client = _defaultClient;

        message.Headers.Add("user-agent", $"speakeasy-sdk/{_language} {_sdkVersion} {_sdkGenVersion} {_openapiDocVersion}");
        var httpResponseMessage = await client.SendAsync(message);
        var response = new DeprecatedCreateLocalLobbyResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 201))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Lobby = JsonConvert.DeserializeObject<Lobby>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 400))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.DeprecatedCreateLocalLobby400ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        if((response.StatusCode == 401))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.DeprecatedCreateLocalLobby401ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.DeprecatedCreateLocalLobby404ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        if((response.StatusCode == 422))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.DeprecatedCreateLocalLobby422ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        if((response.StatusCode == 429))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.DeprecatedCreateLocalLobby429ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        if((response.StatusCode == 500))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.DeprecatedCreateLocalLobby500ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        return response;
    }

        
    [Obsolete("This method will be removed in a future release, please migrate away from it as soon as possible")]
    public async Task<DeprecatedCreatePrivateLobbyResponse> DeprecatedCreatePrivateLobbyAsync(DeprecatedCreatePrivateLobbyRequest? request = null)
    {
        string baseUrl = "";
        var message = DeprecatedCreatePrivateLobbyRequest.BuildHttpRequestMessage("DeprecatedCreatePrivateLobby", request, baseUrl);
        var client = _defaultClient;

        message.Headers.Add("user-agent", $"speakeasy-sdk/{_language} {_sdkVersion} {_sdkGenVersion} {_openapiDocVersion}");
        var httpResponseMessage = await client.SendAsync(message);
        var response = new DeprecatedCreatePrivateLobbyResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 201))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Lobby = JsonConvert.DeserializeObject<Lobby>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 400))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.DeprecatedCreatePrivateLobby400ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        if((response.StatusCode == 401))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.DeprecatedCreatePrivateLobby401ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.DeprecatedCreatePrivateLobby404ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        if((response.StatusCode == 422))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.DeprecatedCreatePrivateLobby422ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        if((response.StatusCode == 429))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.DeprecatedCreatePrivateLobby429ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        if((response.StatusCode == 500))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.DeprecatedCreatePrivateLobby500ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        return response;
    }

        
    [Obsolete("This method will be removed in a future release, please migrate away from it as soon as possible")]
    public async Task<DeprecatedCreatePublicLobbyResponse> DeprecatedCreatePublicLobbyAsync(DeprecatedCreatePublicLobbyRequest? request = null)
    {
        string baseUrl = "";
        var message = DeprecatedCreatePublicLobbyRequest.BuildHttpRequestMessage("DeprecatedCreatePublicLobby", request, baseUrl);
        var client = _defaultClient;

        message.Headers.Add("user-agent", $"speakeasy-sdk/{_language} {_sdkVersion} {_sdkGenVersion} {_openapiDocVersion}");
        var httpResponseMessage = await client.SendAsync(message);
        var response = new DeprecatedCreatePublicLobbyResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 201))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Lobby = JsonConvert.DeserializeObject<Lobby>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 400))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.DeprecatedCreatePublicLobby400ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        if((response.StatusCode == 401))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.DeprecatedCreatePublicLobby401ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.DeprecatedCreatePublicLobby404ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        if((response.StatusCode == 422))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.DeprecatedCreatePublicLobby422ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        if((response.StatusCode == 429))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.DeprecatedCreatePublicLobby429ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        if((response.StatusCode == 500))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.DeprecatedCreatePublicLobby500ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        return response;
    }

        
    [Obsolete("This method will be removed in a future release, please migrate away from it as soon as possible")]
    public async Task<DeprecatedV1CreatePrivateLobbyResponse> DeprecatedV1CreatePrivateLobbyAsync(DeprecatedV1CreatePrivateLobbyRequest request)
    {
        string baseUrl = "";
        var message = DeprecatedV1CreatePrivateLobbyRequest.BuildHttpRequestMessage("DeprecatedV1CreatePrivateLobby", request, baseUrl);
        var client = _defaultClient;

        message.Headers.Add("user-agent", $"speakeasy-sdk/{_language} {_sdkVersion} {_sdkGenVersion} {_openapiDocVersion}");
        var httpResponseMessage = await client.SendAsync(message);
        var response = new DeprecatedV1CreatePrivateLobbyResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.RoomId = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        if((response.StatusCode == 400))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.DeprecatedV1CreatePrivateLobby400ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        if((response.StatusCode == 401))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.DeprecatedV1CreatePrivateLobby401ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.DeprecatedV1CreatePrivateLobby404ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        if((response.StatusCode == 422))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.DeprecatedV1CreatePrivateLobby422ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        if((response.StatusCode == 429))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.DeprecatedV1CreatePrivateLobby429ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        if((response.StatusCode == 500))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.DeprecatedV1CreatePrivateLobby500ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        return response;
    }

        
    [Obsolete("This method will be removed in a future release, please migrate away from it as soon as possible")]
    public async Task<DeprecatedV1CreatePublicLobbyResponse> DeprecatedV1CreatePublicLobbyAsync(DeprecatedV1CreatePublicLobbyRequest request)
    {
        string baseUrl = "";
        var message = DeprecatedV1CreatePublicLobbyRequest.BuildHttpRequestMessage("DeprecatedV1CreatePublicLobby", request, baseUrl);
        var client = _defaultClient;

        message.Headers.Add("user-agent", $"speakeasy-sdk/{_language} {_sdkVersion} {_sdkGenVersion} {_openapiDocVersion}");
        var httpResponseMessage = await client.SendAsync(message);
        var response = new DeprecatedV1CreatePublicLobbyResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.RoomId = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        if((response.StatusCode == 400))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.DeprecatedV1CreatePublicLobby400ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        if((response.StatusCode == 401))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.DeprecatedV1CreatePublicLobby401ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.DeprecatedV1CreatePublicLobby404ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        if((response.StatusCode == 422))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.DeprecatedV1CreatePublicLobby422ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        if((response.StatusCode == 429))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.DeprecatedV1CreatePublicLobby429ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        if((response.StatusCode == 500))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.DeprecatedV1CreatePublicLobby500ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        return response;
    }

        
    [Obsolete("This method will be removed in a future release, please migrate away from it as soon as possible")]
    public async Task<DeprecatedV1ListActivePublicLobbiesResponse> DeprecatedV1ListActivePublicLobbiesAsync(DeprecatedV1ListActivePublicLobbiesRequest request)
    {
        string baseUrl = "";
        var message = DeprecatedV1ListActivePublicLobbiesRequest.BuildHttpRequestMessage("DeprecatedV1ListActivePublicLobbies", request, baseUrl);
        var client = _defaultClient;

        message.Headers.Add("user-agent", $"speakeasy-sdk/{_language} {_sdkVersion} {_sdkGenVersion} {_openapiDocVersion}");
        var httpResponseMessage = await client.SendAsync(message);
        var response = new DeprecatedV1ListActivePublicLobbiesResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Lobbies = JsonConvert.DeserializeObject<List<Lobby>>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 401))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.DeprecatedV1ListActivePublicLobbies401ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.DeprecatedV1ListActivePublicLobbies404ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        return response;
    }

        
    public async Task<GetLobbyInfoResponse> GetLobbyInfoAsync(GetLobbyInfoRequest request)
    {
        string baseUrl = "";
        var message = GetLobbyInfoRequest.BuildHttpRequestMessage("GetLobbyInfo", request, baseUrl);
        var client = _defaultClient;

        message.Headers.Add("user-agent", $"speakeasy-sdk/{_language} {_sdkVersion} {_sdkGenVersion} {_openapiDocVersion}");
        var httpResponseMessage = await client.SendAsync(message);
        var response = new GetLobbyInfoResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Lobby = JsonConvert.DeserializeObject<Lobby>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.GetLobbyInfo404ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        return response;
    }

        
    public async Task<ListActivePublicLobbiesResponse> ListActiveAsync(ListActivePublicLobbiesRequest request)
    {
        string baseUrl = "";
        var message = ListActivePublicLobbiesRequest.BuildHttpRequestMessage("ListActivePublicLobbies", request, baseUrl);
        var client = _defaultClient;

        message.Headers.Add("user-agent", $"speakeasy-sdk/{_language} {_sdkVersion} {_sdkGenVersion} {_openapiDocVersion}");
        var httpResponseMessage = await client.SendAsync(message);
        var response = new ListActivePublicLobbiesResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Lobbies = JsonConvert.DeserializeObject<List<Lobby>>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

        
    public async Task<SetLobbyStateResponse> SetLobbyStateAsync(SetLobbyStateSecurity security, SetLobbyStateRequest? request = null)
    {
        string baseUrl = "";
        var message = SetLobbyStateRequest.BuildHttpRequestMessage("SetLobbyState", request, baseUrl);
        var client = _defaultClient;
        SetLobbyStateSecurity.Apply(security, message);

        message.Headers.Add("user-agent", $"speakeasy-sdk/{_language} {_sdkVersion} {_sdkGenVersion} {_openapiDocVersion}");
        var httpResponseMessage = await client.SendAsync(message);
        var response = new SetLobbyStateResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Lobby = JsonConvert.DeserializeObject<Lobby>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.SetLobbyState404ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        if((response.StatusCode == 422))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.SetLobbyState422ApplicationJSONString = await response.RawResponse.Content.ReadAsStringAsync();
            }
            return response;
        }
        return response;
    }

        
    }
}