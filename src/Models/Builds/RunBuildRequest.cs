
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Hathora.Models.Builds
{
    using Hathora.Utils;
    using Hathora.Models.Shared;
    using NodaTime;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;
    using System.Text;
    
public class RunBuildRequest
{
    [JsonProperty("RequestBody")]
    public RunBuildRequestBody RequestBody { get; set; }
    
    [JsonProperty("appId")]
    public string AppId { get; set; }
    
    [JsonProperty("buildId")]
    public float BuildId { get; set; }
    
    internal static HttpRequestMessage BuildHttpRequestMessage(string operationId, RunBuildRequest value, string baseUrl)
    {
        if("RunBuild" == operationId)
        {
            
            
            var appId = PathParamSerializer.Serialize("simple", false, value.AppId);
            
            var buildId = PathParamSerializer.Serialize("simple", false, value.BuildId);
            var message = new HttpRequestMessage(HttpMethod.Post, baseUrl + $"/builds/v1/{appId}/run/{buildId}");
            var formDataContent = new MultipartFormDataContent();
            
            formDataContent.Add(new ByteArrayContent(value.RequestBody.File.Content), value.RequestBody.File.File, Utilities.ToString(value.RequestBody.File.Content));

            message.Content = formDataContent;
            return message;
        }
        throw new ArgumentException($"Attempt to build HttpRequestMessage for invalid operationId [{operationId}] for request type [RunBuildRequest]");
    }
}
}