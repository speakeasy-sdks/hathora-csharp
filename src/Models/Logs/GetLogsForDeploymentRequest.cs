
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace hathora.Models.Logs
{
    using hathora.Utils;
    using hathora.Models.Shared;
    using NodaTime;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;
    using System.Text;
    
public class GetLogsForDeploymentRequest
{
    [JsonProperty("appId")]
    public string AppId { get; set; }
    
    [JsonProperty("deploymentId")]
    public float DeploymentId { get; set; }
    
    [JsonProperty("follow")]
    public bool? Follow { get; set; }
    
    [JsonProperty("tailLines")]
    public int? TailLines { get; set; }
    
    internal static HttpRequestMessage BuildHttpRequestMessage(string operationId, GetLogsForDeploymentRequest value, string baseUrl)
    {
        if("GetLogsForDeployment" == operationId)
        {
            var queryParams = new List<string>();
            
            
            
            queryParams.Add(QueryParamSerializer.Serialize("form",true, "follow", "", value.Follow));
            
            queryParams.Add(QueryParamSerializer.Serialize("form",true, "tailLines", "", value.TailLines));
            var queryParamString = $"?{String.Join("&", queryParams)}";
            
            var appId = PathParamSerializer.Serialize("simple", false, value.AppId);
            
            var deploymentId = PathParamSerializer.Serialize("simple", false, value.DeploymentId);
            
            
            var message = new HttpRequestMessage(HttpMethod.Get, baseUrl + $"/logs/v1/{appId}/deployment/{deploymentId}" + queryParamString);
            return message;
        }
        throw new ArgumentException($"Attempt to build HttpRequestMessage for invalid operationId [{operationId}] for request type [GetLogsForDeploymentRequest]");
    }
}
}