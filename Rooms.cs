///
 /// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 ///

namespace SDK.Rooms;
using System.Net.Http;
using System.Text;
using Newtonsoft.Json;
using SDK.Models.Shared;
using SDK.Models.Rooms;
using SDK.Utils;

public interface IRoomsSDK
{
    Task<CreateRoomResponse> CreateAsync(CreateRoomRequest request);
    Task<DestroyRoomResponse> DestroyAsync(DestroyRoomRequest request);
    Task<GetActiveRoomsForProcessResponse> GetActiveAsync(GetActiveRoomsForProcessRequest request);
    Task<GetConnectionInfoResponse> GetConnectionInfoAsync(GetConnectionInfoRequest request);
    Task<GetInactiveRoomsForProcessResponse> GetInactiveAsync(GetInactiveRoomsForProcessRequest request);
    Task<GetInfoRoomResponse> GetInfoAsync(GetInfoRoomRequest request);
    Task<SuspendRoomResponse> SuspendAsync(SuspendRoomRequest request);
}

public class RoomsSDK: IRoomsSDK
{

    private const string language = "csharp";
    private const string sdkVersion = "0.0.1";
    private const string sdkGenVersion = "internal";
    public Uri ServerUrl { get { return _defaultClient.BaseAddress; } }
    private HttpClient _defaultClient;
    private HttpClient _securityClient;

    public RoomsSDK(HttpClient defaultClient, HttpClient securityClient)
    {
        _defaultClient = defaultClient;
        _securityClient = securityClient;
    }

    
    public async Task<CreateRoomResponse> CreateAsync(CreateRoomRequest request)
    {
        string baseUrl = "";
        var message = CreateRoomRequest.BuildHttpRequestMessage("CreateRoom", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new CreateRoomResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 201))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 500))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

    
    public async Task<DestroyRoomResponse> DestroyAsync(DestroyRoomRequest request)
    {
        string baseUrl = "";
        var message = DestroyRoomRequest.BuildHttpRequestMessage("DestroyRoom", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new DestroyRoomResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 204))
        {
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 500))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

    
    public async Task<GetActiveRoomsForProcessResponse> GetActiveAsync(GetActiveRoomsForProcessRequest request)
    {
        string baseUrl = "";
        var message = GetActiveRoomsForProcessRequest.BuildHttpRequestMessage("GetActiveRoomsForProcess", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetActiveRoomsForProcessResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.RoomWithoutAllocations = JsonConvert.DeserializeObject<IEnumerable<RoomWithoutAllocations>>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

    
    public async Task<GetConnectionInfoResponse> GetConnectionInfoAsync(GetConnectionInfoRequest request)
    {
        string baseUrl = "";
        var message = GetConnectionInfoRequest.BuildHttpRequestMessage("GetConnectionInfo", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetConnectionInfoResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.ConnectionInfo = JsonConvert.DeserializeObject<object>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 422))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 500))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

    
    public async Task<GetInactiveRoomsForProcessResponse> GetInactiveAsync(GetInactiveRoomsForProcessRequest request)
    {
        string baseUrl = "";
        var message = GetInactiveRoomsForProcessRequest.BuildHttpRequestMessage("GetInactiveRoomsForProcess", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetInactiveRoomsForProcessResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.RoomWithoutAllocations = JsonConvert.DeserializeObject<IEnumerable<RoomWithoutAllocations>>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

    
    public async Task<GetInfoRoomResponse> GetInfoAsync(GetInfoRoomRequest request)
    {
        string baseUrl = "";
        var message = GetInfoRoomRequest.BuildHttpRequestMessage("GetInfoRoom", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetInfoRoomResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Room = JsonConvert.DeserializeObject<Room>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

    
    public async Task<SuspendRoomResponse> SuspendAsync(SuspendRoomRequest request)
    {
        string baseUrl = "";
        var message = SuspendRoomRequest.BuildHttpRequestMessage("SuspendRoom", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new SuspendRoomResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 204))
        {
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 500))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

    
}