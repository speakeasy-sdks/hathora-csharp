///
 /// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 ///

namespace SDK.Deployment;
using System.Net.Http;
using System.Text;
using Newtonsoft.Json;
using SDK.Models.Shared;
using SDK.Models.Deployment;
using SDK.Utils;

public interface IDeploymentSDK
{
    Task<CreateDeploymentResponse> CreateAsync(CreateDeploymentRequest request);
    Task<GetDeploymentsResponse> GetDeploymentsAsync(GetDeploymentsRequest request);
    Task<GetInfoDeploymentResponse> GetInfoAsync(GetInfoDeploymentRequest request);
}

public class DeploymentSDK: IDeploymentSDK
{

    private const string language = "csharp";
    private const string sdkVersion = "0.0.1";
    private const string sdkGenVersion = "internal";
    public Uri ServerUrl { get { return _defaultClient.BaseAddress; } }
    private HttpClient _defaultClient;
    private HttpClient _securityClient;

    public DeploymentSDK(HttpClient defaultClient, HttpClient securityClient)
    {
        _defaultClient = defaultClient;
        _securityClient = securityClient;
    }

    
    public async Task<CreateDeploymentResponse> CreateAsync(CreateDeploymentRequest request)
    {
        string baseUrl = "";
        var message = CreateDeploymentRequest.BuildHttpRequestMessage("CreateDeployment", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new CreateDeploymentResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 201))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Deployment = JsonConvert.DeserializeObject<Deployment>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 422))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 500))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

    
    public async Task<GetDeploymentsResponse> GetDeploymentsAsync(GetDeploymentsRequest request)
    {
        string baseUrl = "";
        var message = GetDeploymentsRequest.BuildHttpRequestMessage("GetDeployments", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetDeploymentsResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Deployments = JsonConvert.DeserializeObject<IEnumerable<Deployment>>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

    
    public async Task<GetInfoDeploymentResponse> GetInfoAsync(GetInfoDeploymentRequest request)
    {
        string baseUrl = "";
        var message = GetInfoDeploymentRequest.BuildHttpRequestMessage("GetInfoDeployment", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetInfoDeploymentResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Deployment = JsonConvert.DeserializeObject<Deployment>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

    
}