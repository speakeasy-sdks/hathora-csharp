
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace hathora.Deployment
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Text;
    using System.Threading.Tasks;
    using Newtonsoft.Json;
    using hathora.Models.Shared;
    using hathora.Models.Deployment;
    using hathora.Utils;

    public interface IDeploymentSDK
    {
        Task<CreateDeploymentResponse> CreateAsync(CreateDeploymentRequest request);
        Task<GetDeploymentInfoResponse> GetDeploymentInfoAsync(GetDeploymentInfoRequest request);
        Task<GetDeploymentsResponse> GetDeploymentsAsync(GetDeploymentsRequest request);
    }

    public class DeploymentSDK: IDeploymentSDK
    {

        private const string language = "csharp";
        private const string sdkVersion = "0.0.1";
        private const string sdkGenVersion = "internal";
        public Uri ServerUrl { get { return _defaultClient.BaseAddress; } }
        private HttpClient _defaultClient;
        private HttpClient _securityClient;

        public DeploymentSDK(HttpClient defaultClient, HttpClient securityClient)
        {
            _defaultClient = defaultClient;
            _securityClient = securityClient;
        }

        
    public async Task<CreateDeploymentResponse> CreateAsync(CreateDeploymentRequest request)
    {
        string baseUrl = "";
        var message = CreateDeploymentRequest.BuildHttpRequestMessage("CreateDeployment", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new CreateDeploymentResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 201))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Deployment = JsonConvert.DeserializeObject<Deployment>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 400))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 500))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

        
    public async Task<GetDeploymentInfoResponse> GetDeploymentInfoAsync(GetDeploymentInfoRequest request)
    {
        string baseUrl = "";
        var message = GetDeploymentInfoRequest.BuildHttpRequestMessage("GetDeploymentInfo", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetDeploymentInfoResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Deployment = JsonConvert.DeserializeObject<Deployment>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

        
    public async Task<GetDeploymentsResponse> GetDeploymentsAsync(GetDeploymentsRequest request)
    {
        string baseUrl = "";
        var message = GetDeploymentsRequest.BuildHttpRequestMessage("GetDeployments", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetDeploymentsResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Deployments = JsonConvert.DeserializeObject<IEnumerable<Deployment>>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

        
    }
}