///
 /// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 ///

namespace SDK.Builds;
using System.Net.Http;
using System.Text;
using Newtonsoft.Json;
using SDK.Models.Shared;
using SDK.Models.Builds;
using SDK.Utils;

public interface IBuildsSDK
{
    Task<CreateBuildResponse> CreateAsync(CreateBuildRequest request);
    Task<DeleteBuildResponse> DeleteAsync(DeleteBuildRequest request);
    Task<GetBuildsResponse> GetBuildsAsync(GetBuildsRequest request);
    Task<GetInfoBuildResponse> GetInfoAsync(GetInfoBuildRequest request);
    Task<RunBuildResponse> RunAsync(RunBuildRequest request);
}

public class BuildsSDK: IBuildsSDK
{

    private const string language = "csharp";
    private const string sdkVersion = "0.0.1";
    private const string sdkGenVersion = "internal";
    public Uri ServerUrl { get { return _defaultClient.BaseAddress; } }
    private HttpClient _defaultClient;
    private HttpClient _securityClient;

    public BuildsSDK(HttpClient defaultClient, HttpClient securityClient)
    {
        _defaultClient = defaultClient;
        _securityClient = securityClient;
    }

    
    public async Task<CreateBuildResponse> CreateAsync(CreateBuildRequest request)
    {
        string baseUrl = "";
        var message = CreateBuildRequest.BuildHttpRequestMessage("CreateBuild", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new CreateBuildResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 201))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Build = JsonConvert.DeserializeObject<Build>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 422))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 500))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

    
    public async Task<DeleteBuildResponse> DeleteAsync(DeleteBuildRequest request)
    {
        string baseUrl = "";
        var message = DeleteBuildRequest.BuildHttpRequestMessage("DeleteBuild", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new DeleteBuildResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 204))
        {
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 422))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 500))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

    
    public async Task<GetBuildsResponse> GetBuildsAsync(GetBuildsRequest request)
    {
        string baseUrl = "";
        var message = GetBuildsRequest.BuildHttpRequestMessage("GetBuilds", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetBuildsResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Builds = JsonConvert.DeserializeObject<IEnumerable<Build>>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

    
    public async Task<GetInfoBuildResponse> GetInfoAsync(GetInfoBuildRequest request)
    {
        string baseUrl = "";
        var message = GetInfoBuildRequest.BuildHttpRequestMessage("GetInfoBuild", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetInfoBuildResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Build = JsonConvert.DeserializeObject<Build>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

    
    public async Task<RunBuildResponse> RunAsync(RunBuildRequest request)
    {
        string baseUrl = "";
        var message = RunBuildRequest.BuildHttpRequestMessage("RunBuild", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new RunBuildResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("text/plain",response.ContentType))
            {
                // text/plain
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 500))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

    
}