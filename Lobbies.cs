///
 /// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 ///

namespace hathora.Lobbies;
using System.Net.Http;
using System.Text;
using Newtonsoft.Json;
using hathora.Models.Shared;
using hathora.Models.Lobbies;
using hathora.Utils;

public interface ILobbiesSDK
{
    Task<CreateLobbyResponse> CreateAsync(CreateLobbyRequest request);
    Task<CreateLocalLobbyResponse> CreateLocalAsync(CreateLocalLobbyRequest request);
    Task<CreatePrivateLobbyResponse> CreatePrivateAsync(CreatePrivateLobbyRequest request);
    Task<CreatePublicLobbyResponse> CreatePublicAsync(CreatePublicLobbyRequest request);
    Task<GetInfoLobbyResponse> GetInfoAsync(GetInfoLobbyRequest request);
    Task<ListActivePublicLobbiesResponse> ListActiveAsync(ListActivePublicLobbiesRequest request);
    Task<SetStateResponse> SetStateAsync(SetStateRequest request);
}

public class LobbiesSDK: ILobbiesSDK
{

    private const string language = "csharp";
    private const string sdkVersion = "0.0.1";
    private const string sdkGenVersion = "internal";
    public Uri ServerUrl { get { return _defaultClient.BaseAddress; } }
    private HttpClient _defaultClient;
    private HttpClient _securityClient;

    public LobbiesSDK(HttpClient defaultClient, HttpClient securityClient)
    {
        _defaultClient = defaultClient;
        _securityClient = securityClient;
    }

    
    public async Task<CreateLobbyResponse> CreateAsync(CreateLobbyRequest request)
    {
        string baseUrl = "";
        var message = CreateLobbyRequest.BuildHttpRequestMessage("CreateLobby", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new CreateLobbyResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 201))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Lobby = JsonConvert.DeserializeObject<Lobby>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 401))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 422))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 429))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 500))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

    
    public async Task<CreateLocalLobbyResponse> CreateLocalAsync(CreateLocalLobbyRequest request)
    {
        string baseUrl = "";
        var message = CreateLocalLobbyRequest.BuildHttpRequestMessage("CreateLocalLobby", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new CreateLocalLobbyResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 201))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Lobby = JsonConvert.DeserializeObject<Lobby>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 401))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 422))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 429))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 500))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

    
    public async Task<CreatePrivateLobbyResponse> CreatePrivateAsync(CreatePrivateLobbyRequest request)
    {
        string baseUrl = "";
        var message = CreatePrivateLobbyRequest.BuildHttpRequestMessage("CreatePrivateLobby", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new CreatePrivateLobbyResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 201))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Lobby = JsonConvert.DeserializeObject<Lobby>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 401))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 422))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 429))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 500))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

    
    public async Task<CreatePublicLobbyResponse> CreatePublicAsync(CreatePublicLobbyRequest request)
    {
        string baseUrl = "";
        var message = CreatePublicLobbyRequest.BuildHttpRequestMessage("CreatePublicLobby", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new CreatePublicLobbyResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 201))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Lobby = JsonConvert.DeserializeObject<Lobby>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 401))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 422))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 429))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 500))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

    
    public async Task<GetInfoLobbyResponse> GetInfoAsync(GetInfoLobbyRequest request)
    {
        string baseUrl = "";
        var message = GetInfoLobbyRequest.BuildHttpRequestMessage("GetInfoLobby", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetInfoLobbyResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Lobby = JsonConvert.DeserializeObject<Lobby>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

    
    public async Task<ListActivePublicLobbiesResponse> ListActiveAsync(ListActivePublicLobbiesRequest request)
    {
        string baseUrl = "";
        var message = ListActivePublicLobbiesRequest.BuildHttpRequestMessage("ListActivePublicLobbies", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new ListActivePublicLobbiesResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Lobbies = JsonConvert.DeserializeObject<IEnumerable<Lobby>>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

    
    public async Task<SetStateResponse> SetStateAsync(SetStateRequest request)
    {
        string baseUrl = "";
        var message = SetStateRequest.BuildHttpRequestMessage("SetState", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new SetStateResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Lobby = JsonConvert.DeserializeObject<Lobby>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 422))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

    
}