
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace hathora.Processes
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Text;
    using System.Threading.Tasks;
    using Newtonsoft.Json;
    using hathora.Models.Shared;
    using hathora.Models.Processes;
    using hathora.Utils;

    public interface IProcessesSDK
    {
        Task<GetProcessInfoResponse> GetProcessInfoAsync(GetProcessInfoRequest request);
        Task<GetRunningProcessesResponse> GetRunningAsync(GetRunningProcessesRequest request);
        Task<GetStoppedProcessesResponse> GetStoppedAsync(GetStoppedProcessesRequest request);
    }

    public class ProcessesSDK: IProcessesSDK
    {

        private const string language = "csharp";
        private const string sdkVersion = "0.0.1";
        private const string sdkGenVersion = "internal";
        public Uri ServerUrl { get { return _defaultClient.BaseAddress; } }
        private HttpClient _defaultClient;
        private HttpClient _securityClient;

        public ProcessesSDK(HttpClient defaultClient, HttpClient securityClient)
        {
            _defaultClient = defaultClient;
            _securityClient = securityClient;
        }

        
    public async Task<GetProcessInfoResponse> GetProcessInfoAsync(GetProcessInfoRequest request)
    {
        string baseUrl = "";
        var message = GetProcessInfoRequest.BuildHttpRequestMessage("GetProcessInfo", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetProcessInfoResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Process = JsonConvert.DeserializeObject<Process>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

        
    public async Task<GetRunningProcessesResponse> GetRunningAsync(GetRunningProcessesRequest request)
    {
        string baseUrl = "";
        var message = GetRunningProcessesRequest.BuildHttpRequestMessage("GetRunningProcesses", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetRunningProcessesResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.ProcessWithRooms = JsonConvert.DeserializeObject<IEnumerable<ProcessWithRooms>>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

        
    public async Task<GetStoppedProcessesResponse> GetStoppedAsync(GetStoppedProcessesRequest request)
    {
        string baseUrl = "";
        var message = GetStoppedProcessesRequest.BuildHttpRequestMessage("GetStoppedProcesses", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetStoppedProcessesResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Processes = JsonConvert.DeserializeObject<IEnumerable<Process>>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

        
    }
}