
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace hathora.Logs
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Text;
    using System.Threading.Tasks;
    using Newtonsoft.Json;
    using hathora.Models.Shared;
    using hathora.Models.Logs;
    using hathora.Utils;

    public interface ILogsSDK
    {
        Task<GetLogsForAppResponse> GetLogsForAppAsync(GetLogsForAppRequest request);
        Task<GetLogsForDeploymentResponse> GetLogsForDeploymentAsync(GetLogsForDeploymentRequest request);
        Task<GetLogsForProcessResponse> GetLogsForProcessAsync(GetLogsForProcessRequest request);
    }

    public class LogsSDK: ILogsSDK
    {

        private const string language = "csharp";
        private const string sdkVersion = "0.0.1";
        private const string sdkGenVersion = "internal";
        public Uri ServerUrl { get { return _defaultClient.BaseAddress; } }
        private HttpClient _defaultClient;
        private HttpClient _securityClient;

        public LogsSDK(HttpClient defaultClient, HttpClient securityClient)
        {
            _defaultClient = defaultClient;
            _securityClient = securityClient;
        }

        
    public async Task<GetLogsForAppResponse> GetLogsForAppAsync(GetLogsForAppRequest request)
    {
        string baseUrl = "";
        var message = GetLogsForAppRequest.BuildHttpRequestMessage("GetLogsForApp", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetLogsForAppResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("text/plain",response.ContentType))
            {
                // text/plain
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

        
    public async Task<GetLogsForDeploymentResponse> GetLogsForDeploymentAsync(GetLogsForDeploymentRequest request)
    {
        string baseUrl = "";
        var message = GetLogsForDeploymentRequest.BuildHttpRequestMessage("GetLogsForDeployment", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetLogsForDeploymentResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("text/plain",response.ContentType))
            {
                // text/plain
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

        
    public async Task<GetLogsForProcessResponse> GetLogsForProcessAsync(GetLogsForProcessRequest request)
    {
        string baseUrl = "";
        var message = GetLogsForProcessRequest.BuildHttpRequestMessage("GetLogsForProcess", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetLogsForProcessResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("text/plain",response.ContentType))
            {
                // text/plain
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

        
    }
}