///
 /// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 ///

namespace SDK.Logs;
using System.Net.Http;
using System.Text;
using Newtonsoft.Json;
using SDK.Models.Shared;
using SDK.Models.Logs;
using SDK.Utils;

public interface ILogsSDK
{
    Task<GetForAppResponse> GetForAppAsync(GetForAppRequest request);
    Task<GetForDeploymentResponse> GetForDeploymentAsync(GetForDeploymentRequest request);
    Task<GetForProcessResponse> GetForProcessAsync(GetForProcessRequest request);
}

public class LogsSDK: ILogsSDK
{

    private const string language = "csharp";
    private const string sdkVersion = "0.0.1";
    private const string sdkGenVersion = "internal";
    public Uri ServerUrl { get { return _defaultClient.BaseAddress; } }
    private HttpClient _defaultClient;
    private HttpClient _securityClient;

    public LogsSDK(HttpClient defaultClient, HttpClient securityClient)
    {
        _defaultClient = defaultClient;
        _securityClient = securityClient;
    }

    
    public async Task<GetForAppResponse> GetForAppAsync(GetForAppRequest request)
    {
        string baseUrl = "";
        var message = GetForAppRequest.BuildHttpRequestMessage("GetForApp", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetForAppResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("text/plain",response.ContentType))
            {
                // text/plain
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

    
    public async Task<GetForDeploymentResponse> GetForDeploymentAsync(GetForDeploymentRequest request)
    {
        string baseUrl = "";
        var message = GetForDeploymentRequest.BuildHttpRequestMessage("GetForDeployment", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetForDeploymentResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("text/plain",response.ContentType))
            {
                // text/plain
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

    
    public async Task<GetForProcessResponse> GetForProcessAsync(GetForProcessRequest request)
    {
        string baseUrl = "";
        var message = GetForProcessRequest.BuildHttpRequestMessage("GetForProcess", request);
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetForProcessResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("text/plain",response.ContentType))
            {
                // text/plain
                throw new NotImplementedException();
            }
            return response;
        }
        if((response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                // application/json
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

    
}